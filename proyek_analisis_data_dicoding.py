# -*- coding: utf-8 -*-
"""Proyek Analisis Data Dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1stIIQXXUe9Zqg8eDmzhad5emrD7egULY

# Proyek Analisis Data: [Proyek Data Analisis Dicoding]
- **Nama:** [Alexis Ronauli Manurung]
- **Email:** [alexisronauli@gmail.com]
- **ID Dicoding:** [alexis_ronauli]

## Menentukan Pertanyaan Bisnis

1. Produk apa yang terjual banyak dan sedikit?
2. Negara mana yang memiliki pembelian produk terbanyak?

## Import Semua Packages/Library yang Digunakan
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

print("Libraries imported successfully.")

"""## Data Wrangling

### Gathering Data
"""

customers_df = pd.read_csv("/content/drive/MyDrive/data/customers_dataset.csv")
customers_df.head()

geolocation_df = pd.read_csv("/content/drive/MyDrive/data/geolocation_dataset.csv")
geolocation_df.head()

order_items_df = pd.read_csv("/content/drive/MyDrive/data/order_items_dataset.csv")
order_items_df.head()

order_payments_df = pd.read_csv("/content/drive/MyDrive/data/order_payments_dataset.csv")
order_payments_df.head()

order_reviews_df = pd.read_csv("/content/drive/MyDrive/data/order_reviews_dataset.csv")
order_reviews_df.head()

orders_df = pd.read_csv("/content/drive/MyDrive/data/orders_dataset.csv")
orders_df.head()

sellers_df = pd.read_csv("/content/drive/MyDrive/data/sellers_dataset.csv")
sellers_df.head()

product_category_name_translation_df = pd.read_csv("/content/drive/MyDrive/data/product_category_name_translation.csv")
product_category_name_translation_df.head()

products_df = pd.read_csv("/content/drive/MyDrive/data/products_dataset.csv")
products_df.head()

"""**Insight:**

Pada tahap ini, saya membaca dan menampilkan beberapa dataset terkait pelanggan, pesanan, ulasan, pembayaran, dan produk menggunakan `pandas`. Langkah ini bertujuan untuk eksplorasi awal guna memahami struktur dan kualitas data sebelum melakukan pembersihan dan analisis lebih lanjut.

### Assessing Data
"""

def periksa_data(df, nama):
    print(f"--- {nama} ---")
    print(df.head())
    print(df.info())

    print("\nNilai yang hilang:")
    print(df.isna().sum())

    print(f"\nNilai duplikat: {df.duplicated().sum()}")
    print("\n" + "-"*50 + "\n")

pelanggan_data = pd.read_csv("/content/drive/MyDrive/data/customers_dataset.csv")
periksa_data(pelanggan_data, "Data Pelanggan")

geolokasi_data = pd.read_csv("/content/drive/MyDrive/data/geolocation_dataset.csv")
periksa_data(geolokasi_data, "Data Geolokasi")

barang_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_items_dataset.csv")
periksa_data(barang_pesanan_data, "Data Barang Pesanan")

pembayaran_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_payments_dataset.csv")
periksa_data(pembayaran_pesanan_data, "Data Pembayaran Pesanan")

ulasan_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_reviews_dataset.csv")
periksa_data(ulasan_pesanan_data, "Data Ulasan Pesanan")

pesanan_data = pd.read_csv("/content/drive/MyDrive/data/orders_dataset.csv")
periksa_data(pesanan_data, "Data Pesanan")

penjual_data = pd.read_csv("/content/drive/MyDrive/data/sellers_dataset.csv")
periksa_data(penjual_data, "Data Penjual")

terjemahan_kategori_produk_data = pd.read_csv("/content/drive/MyDrive/data/product_category_name_translation.csv")
periksa_data(terjemahan_kategori_produk_data, "Data Terjemahan Nama Kategori Produk")

produk_data = pd.read_csv("/content/drive/MyDrive/data/products_dataset.csv")
periksa_data(produk_data, "Data Produk")

"""**Insight:**

Pada tahap ini, saya melakukan pemeriksaan awal pada dataset untuk memahami struktur data, mencari nilai yang hilang, dan mendeteksi duplikat. Langkah ini penting untuk memastikan data bersih dan siap untuk dianalisis lebih lanjut.

### Cleaning Data
"""

def bersihkan_data(df, drop_duplicates=False, drop_na=False, convert_datetime_columns=None):
    if drop_duplicates:
        df.drop_duplicates(inplace=True)

    if drop_na:
        df.dropna(inplace=True)

    if convert_datetime_columns:
        for column in convert_datetime_columns:
            df[column] = pd.to_datetime(df[column])

    return df

pelanggan_data = pd.read_csv("/content/drive/MyDrive/data/customers_dataset.csv")

geolokasi_data = pd.read_csv("/content/drive/MyDrive/data/geolocation_dataset.csv")
geolokasi_data = bersihkan_data(geolokasi_data, drop_duplicates=True)

barang_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_items_dataset.csv")

pembayaran_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_payments_dataset.csv")

ulasan_pesanan_data = pd.read_csv("/content/drive/MyDrive/data/order_reviews_dataset.csv")

pesanan_data = pd.read_csv("/content/drive/MyDrive/data/orders_dataset.csv")
kolom_waktu = [
    "order_purchase_timestamp", "order_approved_at",
    "order_delivered_carrier_date", "order_delivered_customer_date",
    "order_estimated_delivery_date"
]
pesanan_data = bersihkan_data(pesanan_data, convert_datetime_columns=kolom_waktu)

penjual_data = pd.read_csv("/content/drive/MyDrive/data/sellers_dataset.csv")

terjemahan_kategori_produk_data = pd.read_csv("/content/drive/MyDrive/data/product_category_name_translation.csv")

produk_data = pd.read_csv("/content/drive/MyDrive/data/products_dataset.csv")
produk_data = bersihkan_data(produk_data, drop_na=True)

"""**Insight:**

Pada tahap ini, saya melakukan pembersihan data untuk memastikan kualitas dataset sebelum dianalisis lebih lanjut. Langkah-langkah pembersihan meliputi penghapusan duplikat pada data geolokasi, konversi kolom waktu pada data pesanan, dan penghapusan nilai yang hilang pada data produk. Pembersihan ini penting untuk meningkatkan akurasi hasil analisis.

## Exploratory Data Analysis (EDA)

### Explore ...
"""

customers_df = pd.read_csv("/content/drive/MyDrive/data/customers_dataset.csv")
orders_df = pd.read_csv("/content/drive/MyDrive/data/orders_dataset.csv")
order_items_df = pd.read_csv("/content/drive/MyDrive/data/order_items_dataset.csv")
products_df = pd.read_csv("/content/drive/MyDrive/data/products_dataset.csv")
product_category_name_translation = pd.read_csv("/content/drive/MyDrive/data/product_category_name_translation.csv")

# Mengubah kolom waktu menjadi format datetime
datetime_columns = ["order_purchase_timestamp", "order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]
for column in datetime_columns:
    orders_df[column] = pd.to_datetime(orders_df[column])

products_df = pd.merge(
    left=products_df,
    right=product_category_name_translation,
    how="left",
    on="product_category_name",
)

# == Pertanyaan 1: Produk Apa yang Banyak dan Sedikit Terjual? ==
# Menggabungkan order_items dan products untuk mendapatkan informasi tentang produk yang terjual
order_items_with_product_data_df = pd.merge(
    left=order_items_df,
    right=products_df,
    how="left",
    on="product_id"
)

product_sales_summary_df = order_items_with_product_data_df.groupby('product_category_name_english').agg({
    'order_item_id': 'count',
    'price': 'sum'
}).reset_index()

product_sales_summary_df.columns = ['product_category', 'total_sales', 'total_revenue']
product_sales_summary_df = product_sales_summary_df.sort_values(by='total_sales', ascending=False)

print("Produk yang Paling Banyak Terjual:")
print(product_sales_summary_df.head(5))

print("\nProduk yang Paling Sedikit Terjual:")
print(product_sales_summary_df.tail(5))

plt.figure(figsize=(10, 5))
sns.barplot(data=product_sales_summary_df.head(5), x='product_category', y='total_sales')
plt.title("Top 5 Produk yang Paling Banyak Terjual")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 5))
sns.barplot(data=product_sales_summary_df.tail(5), x='product_category', y='total_sales')
plt.title("Top 5 Produk yang Paling Sedikit Terjual")
plt.xticks(rotation=45)
plt.show()

# == Pertanyaan 2: Negara (State) Terbanyak yang Membeli Produk ==
# Menggabungkan orders dan customers untuk melihat state terbanyak dalam pembelian produk
orders_with_customer_state_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="left",
    on="customer_id"
)

state_sales_summary_df = orders_with_customer_state_df.groupby('customer_state').agg({
    'order_id': 'count'
}).reset_index()

state_sales_summary_df.columns = ['customer_state', 'total_orders']
state_sales_summary_df = state_sales_summary_df.sort_values(by='total_orders', ascending=False)

print("Negara (State) dengan Pembelian Terbanyak:")
print(state_sales_summary_df.head(5))

plt.figure(figsize=(10, 5))
sns.barplot(data=state_sales_summary_df.head(5), x='customer_state', y='total_orders')
plt.title("Top 5 Negara (State) dengan Pembelian Terbanyak")
plt.xlabel("State")
plt.ylabel("Jumlah Pesanan")
plt.xticks(rotation=45)
plt.show()

# == Menyimpan Semua Data yang Telah Dieksplorasi ke CSV ==
# Menggabungkan data order_items, orders, dan customers menjadi satu main dataset
main_data_df = pd.merge(
    left=order_items_with_product_data_df,
    right=orders_with_customer_state_df,
    how="left",
    on="order_id"
)

# Mengekspor dataset utama ke CSV
main_data_df.to_csv("/content/drive/MyDrive/data/main_data.csv", index=False)
print("Main dataset berhasil diekspor ke '/content/drive/MyDrive/data/main_data.csv'")

"""**Insight:**

- Pada tahap ini, saya melakukan analisis penjualan produk dan pembelian berdasarkan negara bagian (state).
- Saya menggabungkan beberapa dataset untuk mendapatkan informasi penting. Langkah pertama adalah mengonversi kolom waktu menjadi format datetime, diikuti dengan analisis produk yang paling banyak dan paling sedikit terjual menggunakan pengelompokan kategori produk. Selanjutnya, saya menganalisis negara bagian yang memiliki jumlah pembelian terbanyak.
- Hasil analisis divisualisasikan dengan grafik bar, dan semua data yang telah dieksplorasi diekspor ke CSV untuk dokumentasi lebih lanjut.

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

main_data_df = pd.read_csv("/content/drive/MyDrive/data/main_data.csv")

main_data_df['order_purchase_timestamp'] = pd.to_datetime(main_data_df['order_purchase_timestamp'])

product_sales_df = main_data_df.groupby('product_category_name_english').agg({
    'order_item_id': 'count',
    'price': 'sum'
}).reset_index()

product_sales_df.columns = ['product_category', 'total_sales', 'total_revenue']
product_sales_df = product_sales_df.sort_values(by='total_sales', ascending=False)

most_sold = product_sales_df.head(5)
least_sold = product_sales_df.tail(5)

plt.figure(figsize=(10, 5))
sns.barplot(data=most_sold, x='product_category', y='total_sales', palette='Blues_d')
plt.title("Top 5 Produk yang Paling Banyak Terjual", fontsize=18)
plt.xlabel("Kategori Produk", fontsize=12)
plt.ylabel("Jumlah Penjualan", fontsize=12)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 5))
sns.barplot(data=least_sold, x='product_category', y='total_sales', palette='Oranges_d')
plt.title("Top 5 Produk yang Paling Sedikit Terjual", fontsize=18)
plt.xlabel("Kategori Produk", fontsize=12)
plt.ylabel("Jumlah Penjualan", fontsize=12)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 5))
sns.barplot(data=most_sold, x='product_category', y='total_revenue', palette='Greens_d')
plt.title("Top 5 Produk dengan Pendapatan Terbanyak", fontsize=18)
plt.xlabel("Kategori Produk", fontsize=12)
plt.ylabel("Total Pendapatan", fontsize=12)
plt.xticks(rotation=45)
plt.show()

"""### Pertanyaan 2:"""

main_data_df = pd.read_csv("/content/drive/MyDrive/data/main_data.csv")

main_data_df['order_purchase_timestamp'] = pd.to_datetime(main_data_df['order_purchase_timestamp'])

if 'customer_state' not in main_data_df.columns:
    print(f"Column 'customer_state' not found. Did you mean one of these?\n{main_data_df.columns[main_data_df.columns.str.contains('state', case=False)]}")
else:
    state_sales_df = main_data_df.groupby('customer_state').agg({
        'order_id': 'count',
        'price': 'sum',
        'freight_value': 'sum'
    }).reset_index()

    state_sales_df['total_revenue'] = state_sales_df['price'] + state_sales_df['freight_value']
    state_sales_df = state_sales_df.sort_values(by='order_id', ascending=False)

    top_states_by_orders = state_sales_df.head(5)
    top_states_by_revenue = state_sales_df.sort_values(by='total_revenue', ascending=False).head(5)

    plt.figure(figsize=(10, 5))
    sns.barplot(data=top_states_by_orders, x='customer_state', y='order_id', palette='Blues_d')
    plt.title("Top 5 Negara/State dengan Pembelian Terbanyak", fontsize=18)
    plt.xlabel("Negara/State", fontsize=12)
    plt.ylabel("Jumlah Pembelian", fontsize=12)
    plt.xticks(rotation=45)
    plt.show()

    plt.figure(figsize=(10, 5))
    sns.barplot(data=top_states_by_revenue, x='customer_state', y='total_revenue', palette='Greens_d')
    plt.title("Top 5 Negara/State dengan Pendapatan Terbanyak", fontsize=18)
    plt.xlabel("Negara/State", fontsize=12)
    plt.ylabel("Total Pendapatan", fontsize=12)
    plt.xticks(rotation=45)
    plt.show()

    plt.figure(figsize=(12, 6))
    sns.barplot(data=state_sales_df, x='customer_state', y='order_id', palette='Purples_d')
    plt.title("Jumlah Pembelian per Negara/State", fontsize=18)
    plt.xlabel("Negara/State", fontsize=12)
    plt.ylabel("Jumlah Pembelian", fontsize=12)
    plt.xticks(rotation=90)
    plt.show()

"""**Insight:**
- Pada pertanyaan pertama :
Saya melakukan analisis terhadap kategori produk yang paling banyak dan paling sedikit terjual, serta produk dengan pendapatan tertinggi. Saya mengelompokkan data berdasarkan kategori produk, menghitung total penjualan dan pendapatan, lalu memvisualisasikannya dengan grafik bar. Hasilnya menunjukkan produk-produk terlaris, produk dengan penjualan terendah, dan produk yang menghasilkan pendapatan tertinggi, yang memberikan gambaran penting mengenai performa kategori produk di pasar.

- Pada pertanyaan kedua:
Saya melakukan analisis berdasarkan negara bagian (state) untuk melihat jumlah pembelian dan total pendapatan. Data dikelompokkan berdasarkan negara bagian, dengan menghitung total pembelian, harga, dan biaya pengiriman. Visualisasi dilakukan untuk menampilkan negara bagian dengan jumlah pembelian terbanyak dan pendapatan tertinggi, serta distribusi pembelian di setiap negara bagian. Analisis ini memberikan wawasan mengenai wilayah dengan performa penjualan terbaik.

## Analisis Lanjutan (Opsional)
"""

main_data_df = pd.read_csv("/content/drive/MyDrive/data/main_data.csv")

# Mengubah kolom waktu menjadi format datetime
main_data_df['order_purchase_timestamp'] = pd.to_datetime(main_data_df['order_purchase_timestamp'])

# Menghitung nilai RFM
# 1. Recency: Menghitung jumlah hari sejak transaksi terakhir
snapshot_date = main_data_df['order_purchase_timestamp'].max()  # Mengambil tanggal transaksi terbaru
main_data_df['recency'] = (snapshot_date - main_data_df['order_purchase_timestamp']).dt.days

# 2. Frequency: Menghitung jumlah pesanan yang dilakukan oleh setiap pelanggan
frequency_df = main_data_df.groupby('customer_id').agg({
    'order_id': 'nunique'
}).reset_index()
frequency_df.columns = ['customer_id', 'frequency']

# 3. Monetary: Menghitung total uang yang dihabiskan oleh setiap pelanggan (harga produk + biaya pengiriman)
monetary_df = main_data_df.groupby('customer_id').agg({
    'price': 'sum',
    'freight_value': 'sum'
}).reset_index()

monetary_df['monetary'] = monetary_df['price'] + monetary_df['freight_value']
monetary_df = monetary_df[['customer_id', 'monetary']]

# Menggabungkan nilai Recency, Frequency, dan Monetary ke dalam satu dataframe
rfm_df = main_data_df.groupby('customer_id').agg({
    'recency': 'min'
}).reset_index()

rfm_df = pd.merge(rfm_df, frequency_df, on='customer_id')
rfm_df = pd.merge(rfm_df, monetary_df, on='customer_id')

# Menampilkan hasil RFM
print("Hasil RFM Analysis:")
print(rfm_df.head())

# Membagi skor RFM menjadi 4 segmen berdasarkan kuartil
rfm_df['R_score'] = pd.qcut(rfm_df['recency'], 4, labels=[4, 3, 2, 1])
rfm_df['F_score'] = pd.qcut(rfm_df['frequency'].rank(method='first'), 4, labels=[1, 2, 3, 4])
rfm_df['M_score'] = pd.qcut(rfm_df['monetary'], 4, labels=[1, 2, 3, 4])

# Menggabungkan RFM score menjadi satu kolom
rfm_df['RFM_Score'] = rfm_df['R_score'].astype(str) + rfm_df['F_score'].astype(str) + rfm_df['M_score'].astype(str)

# Menampilkan pelanggan dengan RFM score terbaik
print("Pelanggan dengan RFM Score Terbaik:")
print(rfm_df.sort_values('RFM_Score', ascending=False).head())

# == Visualisasi Distribusi RFM ==
plt.figure(figsize=(10, 6))
sns.histplot(rfm_df['recency'], kde=False, bins=20)
plt.title('Distribusi Recency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(rfm_df['frequency'], kde=False, bins=20)
plt.title('Distribusi Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(rfm_df['monetary'], kde=False, bins=20)
plt.title('Distribusi Monetary')
plt.show()

# Menyimpan Hasil RFM Analysis ke CSV
rfm_df.to_csv("/content/drive/MyDrive/data/rfm_analysis.csv", index=False)
print("Hasil RFM Analysis berhasil diekspor ke '/content/drive/MyDrive/data/rfm_analysis.csv'")

"""**Insight**:

Pada tahap ini, saya melakukan analisis RFM untuk mengukur nilai pelanggan. Recency dihitung berdasarkan jumlah hari sejak transaksi terakhir, Frequency dihitung dari jumlah pesanan per pelanggan, dan Monetary adalah total pengeluaran (harga produk + biaya pengiriman). Setelah menghitung nilai RFM, pelanggan dikelompokkan ke dalam segmen berdasarkan kuartil, dan RFM Score dihitung untuk mengidentifikasi pelanggan dengan nilai tertinggi. Hasilnya divisualisasikan melalui distribusi RFM dan disimpan dalam CSV untuk keperluan analisis lebih lanjut.

## Conclusion

- Conclution pertanyaan 1

Produk yang Paling Banyak Terjual:
Kategori produk "bed_bath_table" merupakan produk yang paling banyak terjual, dengan jumlah penjualan mendekati 10.000 unit. Ini menunjukkan bahwa kategori ini sangat populer di kalangan pelanggan.
Produk lain seperti health_beauty, sports_leisure, furniture_decor, dan computers_accessories juga memiliki penjualan yang tinggi, menunjukkan bahwa kategori-kategori ini termasuk produk-produk yang banyak diminati oleh konsumen.

Produk yang Paling Sedikit Terjual:
Produk dalam kategori seperti furniture_mattress_and_upholstery, cds_dvds_musicals, la_cuisine, fashion_childrens_clothes, dan security_and_services memiliki penjualan yang sangat rendah (sekitar 10-15 unit).
Ini bisa menunjukkan bahwa produk dalam kategori ini memiliki daya tarik yang rendah atau mungkin tidak dipromosikan dengan cukup baik.

Produk dengan Pendapatan Terbanyak:
Kategori "health_beauty" adalah produk dengan pendapatan tertinggi, mendekati 1.000.000, diikuti oleh bed_bath_table. Meskipun penjualan tinggi, pendapatan yang besar juga dapat menunjukkan harga rata-rata yang lebih tinggi di kategori ini.
Kategori "computers_accessories" memiliki pendapatan yang signifikan, meskipun tidak memiliki jumlah penjualan yang sebesar kategori lain, yang juga dapat disebabkan oleh harga unit yang lebih tinggi.

- Conclution pertanyaan 2

Negara/State Terbanyak yang Membeli Produk:
State "SP" mendominasi pembelian dengan lebih dari 40.000 pesanan, jauh di atas negara bagian lain seperti RJ, MG, RS, dan PR.
Negara bagian seperti RS dan PR juga berada di urutan lima besar, namun pembeliannya jauh lebih rendah dibandingkan SP.

Negara dengan Pendapatan Tertinggi:
State "SP" juga mendominasi dalam hal pendapatan dengan total lebih dari 6 juta, disusul oleh RJ dan MG dengan selisih yang signifikan.
Ini menunjukkan bahwa sebagian besar penjualan dan pendapatan perusahaan datang dari negara bagian SP.
Distribusi Jumlah Pembelian per Negara/State:

Visualisasi ini menunjukkan bahwa pembelian didominasi oleh beberapa negara bagian utama seperti SP, sementara negara-negara lain memiliki jumlah pembelian yang sangat kecil.

- RFM

Distribusi Recency:
Sebagian besar pelanggan melakukan pembelian terakhirnya sekitar 100-300 hari yang lalu. Semakin jauh ke kanan pada grafik (lebih dari 400 hari), semakin sedikit jumlah pelanggan, menunjukkan bahwa sebagian besar pelanggan masih relatif aktif dalam melakukan pembelian.

Distribusi Frequency:
Grafik distribusi frekuensi menunjukkan bahwa sebagian besar pelanggan hanya melakukan 1 pembelian. Ini menunjukkan bahwa banyak pelanggan hanya berbelanja sekali, dan ada peluang untuk meningkatkan loyalitas pelanggan dengan strategi retensi.

Distribusi Monetary:
Sebagian besar pelanggan memiliki nilai total pembelian yang rendah, dengan sebagian besar pelanggan membelanjakan di bawah 1000. Hanya sedikit pelanggan yang menghabiskan lebih dari itu, sehingga ada potensi untuk menargetkan pelanggan dengan nilai pembelian yang lebih tinggi.
"""